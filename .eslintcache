[{"C:\\Users\\alexa\\Documents\\RedditClone\\src\\index.js":"1","C:\\Users\\alexa\\Documents\\RedditClone\\src\\reportWebVitals.js":"2","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\App.js":"3","C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\post-list-reducer.js":"4","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\Header.js":"5","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\PostControl.js":"6","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\EditPost.js":"7","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\NewPost.js":"8","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\PostList.js":"9","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\ReusableForm.js":"10","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\Post.js":"11","C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\index.js":"12","C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\edit-reducer.js":"13","C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\form-visible-reducer.js":"14"},{"size":755,"mtime":1607035519916,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1606928801485,"results":"17","hashOfConfig":"16"},{"size":388,"mtime":1606929363726,"results":"18","hashOfConfig":"16"},{"size":813,"mtime":1606937837996,"results":"19","hashOfConfig":"16"},{"size":239,"mtime":1606928801473,"results":"20","hashOfConfig":"16"},{"size":5820,"mtime":1607035431470,"results":"21","hashOfConfig":"16"},{"size":859,"mtime":1606951169527,"results":"22","hashOfConfig":"16"},{"size":808,"mtime":1606944258759,"results":"23","hashOfConfig":"16"},{"size":917,"mtime":1606949523162,"results":"24","hashOfConfig":"16"},{"size":770,"mtime":1606946079217,"results":"25","hashOfConfig":"16"},{"size":1656,"mtime":1606950812296,"results":"26","hashOfConfig":"16"},{"size":368,"mtime":1607033586926,"results":"27","hashOfConfig":"16"},{"size":159,"mtime":1606954600474,"results":"28","hashOfConfig":"16"},{"size":162,"mtime":1606953772862,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qg9hce",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},"C:\\Users\\alexa\\Documents\\RedditClone\\src\\index.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\reportWebVitals.js",[],["63","64"],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\App.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\post-list-reducer.js",["65"],"export default (state = {}, action) => {\r\n  const { timeStamp, content, userName, id, upvotes, downvotes } = action;\r\n  switch (action.type) {\r\n    case \"ADD_UPDATE_POST\":\r\n      return Object.assign({}, state, {\r\n        [id]: {\r\n          timeStamp: timeStamp,\r\n          content: content,\r\n          userName: userName,\r\n          id: id,\r\n          upvotes: upvotes,\r\n          downvotes: downvotes,\r\n        },\r\n      });\r\n    case \"DELETE_POST\":\r\n      const newState = { ...state };\r\n      delete newState[id];\r\n      return newState;\r\n    case \"UP_VOTE\":\r\n      const upvote = { ...state };\r\n      upvote[id].upvotes++;\r\n      return upvote;\r\n    case \"DOWN_VOTE\":\r\n      const downvote = { ...state };\r\n      downvote[id].downvotes--;\r\n      return downvote;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\Header.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\PostControl.js",["66"],"import React from \"react\";\r\nimport PostList from \"./PostList\";\r\nimport EditPost from \"./EditPost\";\r\nimport NewPost from \"./NewPost\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass PostControl extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n    \r\n  //     selectedPost: null,\r\n  //   };\r\n  //   this.handleClick = this.handleClick.bind(this);\r\n  // }\r\n\r\n  handleClick = () => {\r\n    const {dispatch}=this.props;\r\n    if (this.props.selectedPost != null) {\r\n      const action = {\r\n        type :\"NO_POST\"\r\n      };\r\n      dispatch(action);\r\n      const action2 = {\r\n        type:\"TOGGLE_EDIT\"\r\n      };\r\n      dispatch(action2);\r\n      // this.setState({\r\n      //   //formVisible: false,\r\n      //   selectedPost: null\r\n      //   // editing: false,\r\n      // });\r\n    } else {\r\n      const { dispatch } = this.props;\r\n      const action = {\r\n        type: 'TOGGLE_FORM'\r\n    };\r\n    dispatch(action);\r\n    }\r\n  };\r\n  handleDownVotingPost = (id) => {\r\n    console.log(\"DownVote Post Function Executing\");\r\n    const { dispatch } = this.props;\r\n    const action = {\r\n      type: \"DOWN_VOTE\",\r\n      id: id,\r\n    };\r\n    dispatch(action);\r\n    // this.setState({});\r\n  };\r\n  handleUpVotingPost = (id) => {\r\n    console.log(\"UpVote Post Function Executing\");\r\n    const { dispatch } = this.props;\r\n    const action = {\r\n      type: \"UP_VOTE\",\r\n      id: id,\r\n    };\r\n    dispatch(action);\r\n    // this.setState({});\r\n  };\r\n  handleEditingPostInList = (postToEdit) => {\r\n    const { dispatch } = this.props;\r\n    const { userName, content, timestamp, upvotes, downvotes, id } = postToEdit;\r\n    const action = {\r\n      type: \"ADD_UPDATE_POST\",\r\n      userName: userName,\r\n      content: content,\r\n      timeStamp: timestamp,\r\n      id: id,\r\n      upvotes: upvotes || Number(\"0\"),\r\n      downvotes: downvotes || Number(\"0\"),\r\n    };\r\n    dispatch(action);\r\n    const action2 ={\r\n    type:\"TOGGLE_EDIT\"\r\n    }\r\n    dispatch(action2);\r\n    const action3 ={\r\n      type:\"NO_POST\"\r\n    }\r\n    dispatch(action3);\r\n    // this.setState({\r\n    //   //editing: false,\r\n    //   selectedPost: null,\r\n    // });\r\n  };\r\n  handleEditClick = (id) => {\r\n    const { dispatch } = this.props;\r\n    const selectedPost = this.props.masterPostList[id];\r\n    const action = {\r\n      type:'TOGGLE_EDIT'\r\n    }\r\n    dispatch(action);\r\n    const action2 = {\r\n      type:\"SELECTED_POST\"\r\n    }\r\n    dispatch(action.selectedPost);\r\n    \r\n    // this.setState({\r\n    //   selectedPost: selectedPost,\r\n    // });\r\n    \r\n  };\r\n\r\n  handleDeletingPost = (id) => {\r\n    console.log(\"Deleting Post Function Executing\");\r\n    const { dispatch } = this.props;\r\n    const action = {\r\n      type: \"DELETE_POST\",\r\n      id: id,\r\n    };\r\n    dispatch(action);\r\n    const action2 = {\r\n      type:\"NO_POST\"\r\n    }\r\n    dispatch(action2);\r\n  //   this.setState({ selectedPost: null });\r\n  // };\r\n  // * 66-68 NOT NEEDED\r\n  // handleDeleteClick = () => {\r\n  //   this.setState({ selectedPost: null\r\n  // });\r\n\r\n  handleAddingNewPostToList = (newPost) => {\r\n    const { dispatch } = this.props;\r\n    const { userName, content, timeStamp, id, upvotes, downvotes } = newPost;\r\n    const action = {\r\n      type: \"ADD_UPDATE_POST\",\r\n      userName: userName,\r\n      content: content,\r\n      timeStamp: timeStamp,\r\n      id: id,\r\n      upvotes: upvotes || Number(\"0\"),\r\n      downvotes: downvotes || Number(\"0\"),\r\n    };\r\n    console.log(this.props);\r\n    dispatch(action);\r\n    const action2 = {\r\n      type: 'TOGGLE_FORM'\r\n    }\r\n    dispatch(action2);\r\n  };\r\n\r\n  whenUpvoteClicked = (post) => {\r\n    const { dispatch } = this.props;\r\n    const { id } = post;\r\n    const action = {\r\n      type: \"UPDATE_UPVOTE\",\r\n      id: id,\r\n    };\r\n    dispatch(action);\r\n    // this.setState({});\r\n  };\r\n\r\n  whenDownvoteClicked = (post) => {\r\n    console.table(post);\r\n    const { dispatch } = this.props;\r\n    const { id } = post;\r\n    const action = {\r\n      type: \"UPDATE_DOWNVOTE\",\r\n      id: id,\r\n    };\r\n    dispatch(action);\r\n    // this.setState({});\r\n  };\r\n\r\n  render() {\r\n    let currentlyVisibleState = null;\r\n    let buttonText = null;\r\n    if (this.props.editing) {\r\n      currentlyVisibleState = (\r\n        <EditPost\r\n          post={this.props.selectedPost}\r\n          onEditPost={this.handleEditingPostInList}\r\n        />\r\n      );\r\n      buttonText = \"Return to Post List\";\r\n    } else if (this.props.formVisible) {\r\n      currentlyVisibleState = (\r\n        <NewPost onNewPostCreation={this.handleAddingNewPostToList} />\r\n      );\r\n      buttonText = \"Return to Post List\";\r\n    } else {\r\n      currentlyVisibleState = (\r\n        <PostList\r\n          onClickingDownVote={this.handleDownVotingPost}\r\n          onClickingUpVote={this.handleUpVotingPost}\r\n          onClickingDelete={this.handleDeletingPost}\r\n          onClickingEdit={this.handleEditClick}\r\n          postList={this.props.masterPostList}\r\n        />\r\n      );\r\n\r\n      buttonText = \"Add post\";\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          {currentlyVisibleState}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-success\"\r\n            onClick={this.handleClick}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPostControl.propTypes = {\r\n  masterPostList: PropTypes.object,\r\n  formVisible: PropTypes.bool,\r\n  selectedPost: PropTypes.object,\r\n  editing: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    masterPostList: state.masterPostList,\r\n    formVisible:state.formVisibleOnPage,\r\n    selectedPost: state.selectedPost,\r\n    editing:state.editAvailable\r\n  };\r\n};\r\n\r\nPostControl = connect(mapStateToProps)(PostControl);\r\nexport default PostControl;\r\n","C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\EditPost.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\NewPost.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\PostList.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\ReusableForm.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\components\\Post.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\index.js",[],"C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\edit-reducer.js",["67"],"export default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"TOGGLE_EDIT\":\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\alexa\\Documents\\RedditClone\\src\\reducers\\form-visible-reducer.js",["68"],"export default (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"TOGGLE_FORM\":\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":1,"nodeType":"75","endLine":30,"endColumn":3},{"ruleId":null,"fatal":true,"severity":2,"message":"76","line":168,"column":12},{"ruleId":"73","severity":1,"message":"74","line":1,"column":1,"nodeType":"75","endLine":8,"endColumn":3},{"ruleId":"73","severity":1,"message":"74","line":1,"column":1,"nodeType":"75","endLine":8,"endColumn":3},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 166 | \u001b[39m  }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 167 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 168 | \u001b[39m  render() {\u001b[0m\n\u001b[0m \u001b[90m     | \u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 169 | \u001b[39m    let currentlyVisibleState \u001b[33m=\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 170 | \u001b[39m    let buttonText \u001b[33m=\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 171 | \u001b[39m    \u001b[36mif\u001b[39m (\u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mprops\u001b[33m.\u001b[39mediting) {\u001b[0m","no-global-assign","no-unsafe-negation"]